pipeline {
  agent any

  environment {
    LOG_DIR = "logs"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/nguyel25/8.2CDevSecOps.git'
      }
    }

    stage('Install Dependencies') {
      steps {
        bat """
        if not exist %LOG_DIR% mkdir %LOG_DIR%
        npm install  1>%LOG_DIR%\\install.log  2>&1  || exit /b 0
        """
      }
    }

    stage('Run Tests') {
      steps {
        // Run tests and save output to file
        bat 'cmd /c npm test  1>%LOG_DIR%\\tests.log  2>&1 || exit /b 0'
        // Show test output in console (for video)
        bat 'type %LOG_DIR%\\tests.log'
      }
      post {
        always {
          // Email after tests with attachment
          emailext(
            subject: "Test stage: ${currentBuild.currentResult} - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
            body: "Test stage finished.\nConsole: ${env.BUILD_URL}",
            to: 'nguyelo.24@gmail.com',
            attachmentsPattern: 'logs/tests.log'
          )
        }
      }
    }

    stage('Generate Coverage Report') {
      steps {
        bat 'echo (no coverage script in this repo) 1>%LOG_DIR%\\coverage.log'
        bat 'type %LOG_DIR%\\coverage.log'
      }
    }

    stage('NPM Audit (Security Scan)') {
      steps {
        // Run audit -> save to file
        // then print to console
        bat 'cmd /c npm audit  1>%LOG_DIR%\\audit.log  2>&1 || exit /b 0'
        bat 'type %LOG_DIR%\\audit.log'
      }
      post {
        always {
                      // Email after security scan with attachment
          emailext(
            subject: "Security scan: ${currentBuild.currentResult} - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
            body: "NPM audit completed.\nConsole: ${env.BUILD_URL}",
            to: 'nguyelo.24@gmail.com',
            attachmentsPattern: 'logs/audit.log'
          )
        }
      }
    }
  }

  post {
    always {
        // Keep all logs
      archiveArtifacts artifacts: 'logs/*.log', fingerprint: true
    }
    success {
      emailext(
        subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} SUCCESS",
        body: "Build succeeded.\n${env.BUILD_URL}",
        to: 'nguyelo.24@gmail.com',
        attachmentsPattern: 'logs/*.log'
      )
    }
    failure {
      emailext(
        subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} FAILED",
        body: "Build failed.\n${env.BUILD_URL}",
        to: 'nguyelo.24@gmail.com',
        attachmentsPattern: 'logs/*.log'
      )
    }
  }
}
// trigger build Tue Sep  9 23:30:16 AEST 2025
// trigger build Tue Sep  9 23:34:12 AEST 2025
// trigger build Tue Sep  9 23:43:15 AEST 2025
// trigger build Wed Sep 10 00:02:29 AEST 2025
// trigger build Wed Sep 10 00:14:20 AEST 2025
// trigger build Wed Sep 10 00:23:46 AEST 2025
